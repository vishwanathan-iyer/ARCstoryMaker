'''

Overview
The Story Maker Program is a Python-based application that generates a story based on user input prompts. The program consists of three main parts:

Story Writer: This module takes user input prompts and generates a story based on the input.
Image Generator: This module uses a Flux.1 diffusion model to generate images based on the story and prompts generated by the Story Writer module.
Story Book: This module displays the generated story and images.
'''
from PIL import Image
from openai import OpenAI
import streamlit as st
import json
from urllib import request, parse
import random
import os
import time
import shutil

story_str = ""

prompt_list=[]
filename = r"workflow_api.json"
output_dir = r"path-to-comfy-ui-output-images"
story_dir = r"Stories"
st.set_page_config(layout="wide")
st.title("ARC Story Maker")

# Read the worlflow json file for comfy UI promot queue.
with open(filename, 'r') as file:
    data_str = file.read()

prompt_text = data_str

# comfy UI call to queue prompts for generating images.
def queue_prompt(prompt):
    p = {"prompt": prompt}
    data = json.dumps(p).encode('utf-8')
    req =  request.Request("http://127.0.0.1:8188/prompt", data=data)
    request.urlopen(req)

# Function to generate single image based on input prompt.
def generate_image(img_prompt):
    prompt = json.loads(prompt_text)
    #set the text prompt for our positive CLIPTextEncode
    prompt["6"]["inputs"]["text"] = img_prompt

    #set the seed for our KSampler node
    prompt["3"]["inputs"]["seed"] = random.randint(1,999999999999)  

    queue_prompt(prompt)

# Function to get the latest generated image in comfy UI output directory
def get_latest_image(dirpath, valid_extensions=('jpg','jpeg','png')):
    """
    Get the latest image file in the given directory
    """
    # get filepaths of all files and dirs in the given dir
    valid_files = [os.path.join(dirpath, filename) for filename in os.listdir(dirpath)]
    # filter out directories, no-extension, and wrong extension files
    valid_files = [f for f in valid_files if '.' in f and \
        f.rsplit('.',1)[-1] in valid_extensions and os.path.isfile(f)]

    if not valid_files:
        raise ValueError("No valid images in %s" % dirpath)

    return max(valid_files, key=os.path.getmtime) 

# Function to check if new image is generated once the prompt is queued to comfy UI API.
def check_new_image(output_dir):
    current_latest=get_latest_image(output_dir)
    while current_latest==get_latest_image(output_dir):
        with st.spinner('Please wait, genearating new image!'):
            time.sleep(20)
    return get_latest_image(output_dir)

# Function to list all saveed stories to show on the story book page.
def get_folder_names(path):
    """Gets a list of all folder names in the given path."""
    folder_names = []
    for entry in os.scandir(path):
        if entry.is_dir():
            folder_names.append(entry.name)
    return folder_names

# Function to extract the stroy from the json text generated by LLM model.
def extract_story(story_str):
    stroyline_list=[]
    story_formatted=""
    try:    
        if isinstance(story_str,str):
            story=json.loads(story_str)
        else:
            story=story_str
        
        stroyline_list.extend([
        story['introduction']['story_line'], 
        story['main_plot']['story_line'] ,
        story['climax']['story_line'] ,
        story['morale']['story_line']] )

        for s in stroyline_list:
            story_formatted=story_formatted + s + "  \n"+"[FIGURE]" +"  \n"
    except Exception as e:
        print(e)
    return story_formatted

# Function to extrct the prompts from the json text generated 
def extract_prompts(story_json):

    prompt_list=[]
    prompt_list.extend([
    story_json['introduction']['image_prompt'], 
    story_json['main_plot']['image_prompt'] ,
    story_json['climax']['image_prompt'] ,
    story_json['morale']['image_prompt'] ])

    return prompt_list

# To generate 3 tabbed output in the application
tab1, tab2, tab3 = st.tabs(["Story Writer", "Image Generator","Story Book"])
# this tab interacts with LLM model to chat and show a skeleton of the story.
with tab1:
    col1,col2 =st.columns(2)
    with col1:
        # client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        client = OpenAI(
        # This is the default and can be omitted
        # api_key=os.environ.get("OPENAI_API_KEY"),
        api_key="fake-api-key",
        base_url="http://127.0.0.1:8080" # change the default port if needed
        )   

        if "openai_model" not in st.session_state:
            st.session_state["openai_model"] = "gpt-3.5-turbo"

        if "messages" not in st.session_state:
            st.session_state.messages = [ 
                {'role':'system', 'content':
                    """
                    You are friendly story write chatbot who can write stories in different styles e.g. fantasy, science fiction, adult language, 
                    child language, drama, comedy etc. generate story in 4 parts introduction, main plot, climax and morale of the story
                    each part must consist a image prompt will be used by diffusion model to generate the story images, Generate a json file having 4 json objects with each having keys for story line 
                    and corresponding image prompt to be used in diffusion model to generate the visual image of the plot based on the style provided by user.

                    The format of json file must be 
                    {
                    "introduction": {
                        "story_line": "",
                        "image_prompt": ""
                    },
                    "main_plot": {
                        "story_line": "",
                        "image_prompt": ""
                    },
                    "climax": {
                        "story_line": "",
                        "image_prompt": ""
                    },
                    "morale": {
                        "story_line": "",
                        "image_prompt": ""
                    }
                    } 
                Output strictly a json format string without any other text or explaination. 
                """
                }
                ]


        for message in st.session_state.messages[1:]:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        if prompt := st.chat_input("What type of story you wish to write?"):
            st.session_state.messages.append({"role": "user", "content": prompt})         
            with st.chat_message("user"):
                st.markdown(prompt)

            with st.chat_message("assistant"):
                stream = client.chat.completions.create(
                    model=st.session_state["openai_model"],
                    messages=[
                        {"role": m["role"], "content": m["content"]}
                        for m in st.session_state.messages
                    ],
                    stream=True,
                )
                response = st.write_stream(stream)
            st.session_state.messages.append({"role": "assistant", "content": response})
# This tabs shows the skeleton of the story.
    with col2:
        load_story = st.checkbox("Load Story")
        if load_story:
            story_list=get_folder_names(story_dir)
            loaded_stroy = st.selectbox(
                "Select a story: ",
                tuple(story_list),
                key="load_story"
            )
            st.write("Skeleton of the Story:")
            try:
                story_folder=os.path.join(story_dir,loaded_stroy)
                story_path_json=os.path.join(story_folder,'story.json')
                f = open(story_path_json)
                story_json = json.load(f)
                f.close()
        
                story=story_json
                st.write("Story",extract_story(story))
                prompt_list=extract_prompts(story)
                img0_path=os.path.join(story_folder,'0.png')
                img1_path=os.path.join(story_folder,'1.png')
                img2_path=os.path.join(story_folder,'2.png')
                img3_path=os.path.join(story_folder,'3.png')
                st.session_state['image_dir'] = [img0_path,img1_path,img2_path,img3_path]
            except:
                print("Selected folder does not have story in proper format.")
                if story_str!="":
                    st.write("Story",extract_story(story_str))
                    story=json.loads(story_str)
                    prompt_list=extract_prompts(story)

        else:
            if(len(st.session_state.messages)>2): # atleast 1 story is generated
                try:
                    story=json.loads(st.session_state.messages[-1]['content'])
                    st.write("Skeleton of the Story:")
                    st.write("Story",extract_story(st.session_state.messages[-1]['content']))
                    prompt_list=extract_prompts(story)
                except:
                    print("New story not genearted yet.")
                    if story_str!="":
                        st.write("Story",extract_story(story_str))
                        story=json.loads(story_str)
                        prompt_list=extract_prompts(story)

                        

        
# Render the 2nd tab data only if the story is generated in proper format and initial prompts are ready to generate the images.        
if prompt_list!=[]:
    if 'image_dir' not in st.session_state:
        st.session_state['image_dir'] = ["","","",""]
    
# This tab is the imgage creator that takes prompts and sends it to comfy ui API to generate the images.
    with tab2:
        col0, col1, col2, col3  = st.columns(4)
        
        with col0:
            prompt_list[0]=st.text_area("prompt0",prompt_list[0])
            if st.button("Generate0"):
                generate_image(prompt_list[0])
                story['introduction']['image_prompt']=prompt_list[0]
                st.session_state['image_dir'][0]=check_new_image(output_dir)
            if(st.session_state['image_dir'][0]!=""):
                st.write(st.session_state['image_dir'][0])
                st.markdown("""---""")
                st.image(Image.open(st.session_state['image_dir'][0]), caption=story['introduction']['story_line'], width=250)
                
        with col1:
            prompt_list[1]=st.text_area("prompt1",prompt_list[1])
            if st.button("Generate1"):
                generate_image(prompt_list[1])
                story['main_plot']['image_prompt']=prompt_list[1]
                st.session_state['image_dir'][1]=check_new_image(output_dir)
            if(st.session_state['image_dir'][1]!=""):
                st.write(st.session_state['image_dir'][1])
                st.markdown("""---""")
                st.image(Image.open(st.session_state['image_dir'][1]), caption=story['main_plot']['story_line'], width=250)
        with col2:
            prompt_list[2]=st.text_area("prompt2",prompt_list[2])
            if st.button("Generate2"):
                generate_image(prompt_list[2])
                story['climax']['image_prompt']=prompt_list[2]
                st.session_state['image_dir'][2]=check_new_image(output_dir)
            if(st.session_state['image_dir'][2]!=""):
                st.write(st.session_state['image_dir'][2])
                st.markdown("""---""")
                st.image(Image.open(st.session_state['image_dir'][2]), caption=story['climax']['story_line'], width=250)
            
        with col3:
            prompt_list[3]=st.text_area("prompt3",prompt_list[3])
            if st.button("Generate3"):
                generate_image(prompt_list[3])
                story['morale']['image_prompt']=prompt_list[3]
                st.session_state['image_dir'][3]=check_new_image(output_dir)
            if(st.session_state['image_dir'][3]!=""):
                st.write(st.session_state['image_dir'][3])
                st.markdown("""---""")
                st.image(Image.open(st.session_state['image_dir'][3]), caption=story['morale']['story_line'], width=250)
            
        st.markdown("""---""")
        story_book_title=st.text_input("Enter title to save story","new_story")
        if st.button("Save"):
            destination_folder=os.path.join(story_dir,story_book_title)
            if not os.path.exists(destination_folder):
                os.makedirs(destination_folder)
            
            story_json=os.path.join(destination_folder,"story.json")
            story_text=os.path.join(destination_folder,"story.txt")
            with open(story_text, 'w') as f:
                f.write(extract_story(st.session_state.messages[-1]['content']))  

            with open(story_json, 'w') as f:
                # story_json_formatted=json.dumps(story,indent=4)
                json.dump(story, f,indent=4)
            i=0
            for img in st.session_state['image_dir']:
                img_path=os.path.join(destination_folder,str(i)+'.png')
                shutil.copy(img, img_path)
                i=i+1
            
# This tab is the story book viewer, to see all saved stories so far.
with tab3:
    story_list=get_folder_names(story_dir)
    option = st.selectbox(
        "Select a story: ",
        tuple(story_list),
        key='read_story'
    )
    story_folder=os.path.join(story_dir,option)
    story_path_json=os.path.join(story_folder,'story.json')

    
    f = open(story_path_json)
    story_json = json.load(f)
    f.close()

    story_text=os.path.join(story_folder,"story.txt")
    with open(story_text, 'w') as f:
        f.write(extract_story(story_json)) 
    
    col0, col1, col2, col3  = st.columns(4)
    
    with col0:
        img_path=os.path.join(story_folder,'0.png')
        st.image(Image.open(img_path), caption=story_json['introduction']['story_line'], width=300)
    with col1:
        img_path=os.path.join(story_folder,'1.png')
        st.image(Image.open(img_path), caption=story_json['main_plot']['story_line'], width=300)
    with col2:
        img_path=os.path.join(story_folder,'2.png')
        st.image(Image.open(img_path), caption=story_json['climax']['story_line'], width=300)
    with col3:
        img_path=os.path.join(story_folder,'3.png')
        st.image(Image.open(img_path), caption=story_json['morale']['story_line'], width=300)
                
            
